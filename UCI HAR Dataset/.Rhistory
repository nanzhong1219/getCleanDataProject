225
290
317
285
262
299
281
272
357
303
332
273
258
293
308
275
242
339
248
309
286
250
337
287
266
314
280
261
221
257
324
244
311
233
216
232
295
251
268
240
260
294
278
265
297
227
252
234
310
255
264
304
223
289
259
235
283
226
231
241
228
236
263
243
207
247
217
256
200
194
245
213
211
209
246
239
219
254
210
222
204
229
206
237
220
201
214
249
202
238
253
215
193
205
218
212
198
224
208
192
203
189
185
167
187
178
188
196
180
197
183
195
190
170
168
186
174
161
182
191
199
173
172
157
176
171
179
181
169
155
158
177
165
184
166
175
149
156
141
163
164
145
160
162
152
153
154
151
140
144
159
147
143
150
148
131
133
139
135
138
146
130
142
134
129
137
128
132
136
127
125
126
122
119
123
121
124
120
115
116
118
117
109
114
112
108
105
113
110
106
107
111
104
98
103
102
100
94
99
97
101
96
95
93
92
89
86
88
91
90
85
87
83
81
82
84
79
80
77
78
76
75
74
72
73
70
69
71
68
67
65
64
63
66
62
60
61
58
59
57
55
56
54
53
52
51
50
49
48
47
46
45
44
43
42
41
40
39
38
37
36
35
34
33
32
31
30
29
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
wklytxn<-scan()
wklytxn<-scan()
freq<-scan()
plot(wklytxn,freq)
freq<-scan()
freq[1]
plot(wklytxn[6:100],freq[6:100])
plot(wklytxn[1:90],freq[1:90])
wklytxn<-scan()
freq<-scan()
plot(wklytxn,freq)
ls()
dim(dfhold)
dfhold
ls()
library(nlme)
library(lattice)
xyplog(weight~ Time | Diet,BodyWeight)
xyplot(weight~ Time | Diet,BodyWeight)
?print.trellis
?splom
?trellis.par.set
show.seetings()
show.settings()
tp<-trellis.par.get()
tp
library(datasets)
data(airquality)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
library(ggplot2)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
install.packages("ggplot2")
library(ggplot2)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?`=
?"="
?transform
data(airquality)
class(airquality)
?geom
?geom_abline
?qplot
qplot(Wind, Ozone, data = airquality, facets = . ~ Month) + geom_smooth()
?lpoints
setwd("C:/Users/nzhong/Documents/rstudio/getCleanData/UCI HAR Dataset/")
## read x, y and subject data froming testing directory
y_test<-read.table("./test/y_test.txt")
x_test<-read.table("./test/X_test.txt")
subject_test<-read.table("./test/subject_test.txt")
## column bind in the sequence of subject,feature vector, activity label
test_ds<-cbind(subject_test,x_test,y_test)
## do the same for training directory
y_train<-read.table("./train/y_train.txt")
x_train<-read.table("./train/X_train.txt")
subject_train<-read.table("./train/subject_train.txt")
train_ds<-cbind(subject_train,x_train,y_train)
#### Merges the training and the test sets to create one data set
ds<-rbind(train_ds,test_ds)
## read descriptive feature names and activity labels
features<-read.table("features.txt")
activity<-read.table("activity_labels.txt")
setnames(activity,c("activity_label","activity_description"))
#### Appropriately labels the data set with descriptive variable names
setnames(ds,c("subject",features$V2,"activity_label"))
#### Extracts only the measurements on the mean and standard deviation for each measurement
temp<-do.call(rbind,strsplit(features$V2,'[-(]'))[,2]
indMeanStd<-(temp=="mean" | temp == "std")
sel_ds<-ds[,c(TRUE,indMeanStd,TRUE)]
#### Uses descriptive activity names to name the activities in the data set
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
#### creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_ds<-aggregate(sel_ds_desc[,3:(length(sel_ds_desc)-1)],by=list(sel_ds_desc$activity_description,sel_ds_desc$subject),FUN = mean)
new_names<-c("activity","subject",paste("avg",names(tidy_ds)[3:length(tidy_ds)],sep="-"))
setnames(tidy_ds,new_names)
## output the tidy dataset as txt file
write.table(tidy_ds,file = "tidy_dataSet.txt",row.names = FALSE)
setwd("C:/Users/nzhong/Documents/rstudio/getCleanData/UCI HAR Dataset/")
## read x, y and subject data froming testing directory
y_test<-read.table("./test/y_test.txt")
x_test<-read.table("./test/X_test.txt")
subject_test<-read.table("./test/subject_test.txt")
## column bind in the sequence of subject,feature vector, activity label
test_ds<-cbind(subject_test,x_test,y_test)
## do the same for training directory
y_train<-read.table("./train/y_train.txt")
x_train<-read.table("./train/X_train.txt")
subject_train<-read.table("./train/subject_train.txt")
train_ds<-cbind(subject_train,x_train,y_train)
#### Merges the training and the test sets to create one data set
ds<-rbind(train_ds,test_ds)
## read descriptive feature names and activity labels
features<-read.table("features.txt")
activity<-read.table("activity_labels.txt")
setnames(activity,c("activity_label","activity_description"))
#### Appropriately labels the data set with descriptive variable names
setnames(ds,c("subject",features$V2,"activity_label"))
#### Extracts only the measurements on the mean and standard deviation for each measurement
temp<-do.call(rbind,strsplit(features$V2,'[-(]'))[,2]
indMeanStd<-(temp=="mean" | temp == "std")
sel_ds<-ds[,c(TRUE,indMeanStd,TRUE)]
#### Uses descriptive activity names to name the activities in the data set
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
#### creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_ds<-aggregate(sel_ds_desc[,3:(length(sel_ds_desc)-1)],by=list(sel_ds_desc$activity_description,sel_ds_desc$subject),FUN = mean)
new_names<-c("activity","subject",paste("avg",names(tidy_ds)[3:length(tidy_ds)],sep="-"))
setnames(tidy_ds,new_names)
## output the tidy dataset as txt file
write.table(tidy_ds,file = "tidy_dataSet.txt",row.names = FALSE)
setwd("C:/Users/nzhong/Documents/rstudio/CourseraDataScienceTrack/getCleanData/UCI HAR Dataset/")
## read x, y and subject data froming testing directory
y_test<-read.table("./test/y_test.txt")
x_test<-read.table("./test/X_test.txt")
subject_test<-read.table("./test/subject_test.txt")
## column bind in the sequence of subject,feature vector, activity label
test_ds<-cbind(subject_test,x_test,y_test)
## do the same for training directory
y_train<-read.table("./train/y_train.txt")
x_train<-read.table("./train/X_train.txt")
subject_train<-read.table("./train/subject_train.txt")
train_ds<-cbind(subject_train,x_train,y_train)
#### Merges the training and the test sets to create one data set
ds<-rbind(train_ds,test_ds)
## read descriptive feature names and activity labels
features<-read.table("features.txt")
activity<-read.table("activity_labels.txt")
setnames(activity,c("activity_label","activity_description"))
#### Appropriately labels the data set with descriptive variable names
setnames(ds,c("subject",features$V2,"activity_label"))
#### Extracts only the measurements on the mean and standard deviation for each measurement
temp<-do.call(rbind,strsplit(features$V2,'[-(]'))[,2]
indMeanStd<-(temp=="mean" | temp == "std")
sel_ds<-ds[,c(TRUE,indMeanStd,TRUE)]
#### Uses descriptive activity names to name the activities in the data set
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
#### creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_ds<-aggregate(sel_ds_desc[,3:(length(sel_ds_desc)-1)],by=list(sel_ds_desc$activity_description,sel_ds_desc$subject),FUN = mean)
new_names<-c("activity","subject",paste("avg",names(tidy_ds)[3:length(tidy_ds)],sep="-"))
setnames(tidy_ds,new_names)
## output the tidy dataset as txt file
write.table(tidy_ds,file = "tidy_dataSet.txt",row.names = FALSE)
?setname
?setnames
?setNames
setNames(activity,c("activity_label","activity_description"))
#### Appropriately labels the data set with descriptive variable names
setNames(ds,c("subject",features$V2,"activity_label"))
#### Extracts only the measurements on the mean and standard deviation for each measurement
temp<-do.call(rbind,strsplit(features$V2,'[-(]'))[,2]
indMeanStd<-(temp=="mean" | temp == "std")
sel_ds<-ds[,c(TRUE,indMeanStd,TRUE)]
#### Uses descriptive activity names to name the activities in the data set
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
#### creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_ds<-aggregate(sel_ds_desc[,3:(length(sel_ds_desc)-1)],by=list(sel_ds_desc$activity_description,sel_ds_desc$subject),FUN = mean)
new_names<-c("activity","subject",paste("avg",names(tidy_ds)[3:length(tidy_ds)],sep="-"))
setNames(tidy_ds,new_names)
## output the tidy dataset as txt file
write.table(tidy_ds,file = "tidy_dataSet.txt",row.names = FALSE)
library(data.table)
setnames(activity,c("activity_label","activity_description"))
#### Appropriately labels the data set with descriptive variable names
setnames(ds,c("subject",features$V2,"activity_label"))
#### Extracts only the measurements on the mean and standard deviation for each measurement
temp<-do.call(rbind,strsplit(features$V2,'[-(]'))[,2]
indMeanStd<-(temp=="mean" | temp == "std")
sel_ds<-ds[,c(TRUE,indMeanStd,TRUE)]
#### Uses descriptive activity names to name the activities in the data set
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
#### creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_ds<-aggregate(sel_ds_desc[,3:(length(sel_ds_desc)-1)],by=list(sel_ds_desc$activity_description,sel_ds_desc$subject),FUN = mean)
new_names<-c("activity","subject",paste("avg",names(tidy_ds)[3:length(tidy_ds)],sep="-"))
setnames(tidy_ds,new_names)
## output the tidy dataset as txt file
write.table(tidy_ds,file = "tidy_dataSet.txt",row.names = FALSE)
features
strsplit("nan-mean()",'[[-(]')
strsplit("nan-mean()",'[-(]')
class(features$V2)
features<-read.table("features.txt")
class(features$V2)
features<-read.table("features.txt",c("integer","character"))
activity<-read.table("activity_labels.txt",c("integer","character"))
?read.table
features<-read.table("features.txt",colClasses=c("integer","character"))
activity<-read.table("activity_labels.txt",colClasses=c("integer","character"))
setnames(ds,c("subject",features$V2,"activity_label"))
temp<-do.call(rbind,strsplit(features$V2,'[-(]'))[,2]
indMeanStd<-(temp=="mean" | temp == "std")
sel_ds<-ds[,c(TRUE,indMeanStd,TRUE)]
#### Uses descriptive activity names to name the activities in the data set
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
#### creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_ds<-aggregate(sel_ds_desc[,3:(length(sel_ds_desc)-1)],by=list(sel_ds_desc$activity_description,sel_ds_desc$subject),FUN = mean)
new_names<-c("activity","subject",paste("avg",names(tidy_ds)[3:length(tidy_ds)],sep="-"))
setnames(tidy_ds,new_names)
#### Uses descriptive activity names to name the activities in the data set
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
names)sel_ds
names(sel_ds)
names(activity)
setnames(activity,c("activity_label","activity_description"))
sel_ds_desc<-merge(sel_ds,activity,by="activity_label",all.x=TRUE)
#### creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_ds<-aggregate(sel_ds_desc[,3:(length(sel_ds_desc)-1)],by=list(sel_ds_desc$activity_description,sel_ds_desc$subject),FUN = mean)
new_names<-c("activity","subject",paste("avg",names(tidy_ds)[3:length(tidy_ds)],sep="-"))
setnames(tidy_ds,new_names)
## output the tidy dataset as txt file
write.table(tidy_ds,file = "tidy_dataSet.txt",row.names = FALSE)
setwd("C:/Users/nzhong/Documents/rstudio/CourseraDataScienceTrack/getCleanDataProject/")
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./HumanActivityRecognitionUsingSmartPhone.zip")
unzip("./HumanActivityRecognitionUsingSmartPhone.zip")
source('~/rstudio/CourseraDataScienceTrack/getCleanDataProject/run_analysis.R', echo=TRUE)
head(tidy_ds)
